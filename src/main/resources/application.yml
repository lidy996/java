server:
  port: 9090

spring:
  kafka:
    producer:
      # 高优先级配置
      # 以逗号分隔的主机：端口对列表，用于建立与Kafka群集的初始连接
      bootstrap-servers: ${kafka_server:localhost:9092}

      # key的Serializer类，实现了org.apache.kafka.common.serialization.Serializer接口
      key-serializer: org.apache.kafka.common.serialization.StringSerializer

      # 值的Serializer类，实现了org.apache.kafka.common.serialization.Serializer接口
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

      # 每当多个记录被发送到同一分区时，生产者将尝试将记录一起批量处理为更少的请求，
      # 这有助于提升客户端和服务端之间的性能，此配置控制默认批量大小（以字节b为单位），默认值为1638      # 这有助于提升客户端和服务端之间的性能，此配置控制默认批量大小（以字节b为单位），默认值为163844
      batch-size: 16384

      # producer可以用来缓存数据的内存大小。如果数据产生速度大于向broker发送的速度，producer会阻塞或者抛出异常，以“block.on.buffer.full”来表明。
      # 这项设置将和producer能够使用的总内存相关，但并不是一个硬性的限制，因为不是producer使用的所有内存都是用于缓存。一些额外的内存会用于压缩（如果引入压缩机制），同样还有一些用于维护请求。
      buffer-memory: 33554432

      # procedure要求leader在考虑完成请求之前收到的确认数，用于控制发送记录在服务端的持久化，其值可以为如下：
      # acks :  0 如果设置为零，则生产者将不会等待来自服务器的任何确认，该记录将立即添加到套接字缓冲区并视为已发送。在这种情况下，无法保证服务器已收到记录，并且重试配置将不会生效（因为客户端通常不会知道任何故障），为每条记录返回的偏移量始终设置为-1。
      # acks :  1 这意味着leader会将记录写入其本地日志，但无需等待所有副本服务器的完全确认即可做出回应，在这种情况下，如果leader在确认记录后立即失败，但在将数据复制到所有的副本服务器之前，则记录将会丢失。
      # acks :  all 这意味着leader将等待完整的同步副本集以确认记录，这保证了只要至少一个同步副本服务器仍然存活，记录就不会丢失，这是最强有力的保证，这相当于acks :  -1的设置。
      # 可以设置的值为：all, -1, 0, 1
      acks: all

      # 设置大于0的值将使客户端重新发送任何数据，一旦这些数据发送失败。注意，这些重试与客户端接收到发送错误时的重试没有什么不同。
      # 允许重试将潜在的改变数据的顺序，如果这两个消息记录都是发送到同一个partition，则第一个消息失败第二个发送成功，则第二条消息会比第一条消息出现要早。
      retries: 3

      # 当向server发出请求时，这个字符串会发送给server。目的是能够追踪请求源头，以此来允许ip/port许可列表之外的一些应用可以发送信息。这项应用可以设置任意字符串，因为没有任何功能性的目的，除了记录和跟踪
      client-id: 1

      # producer用于压缩数据的压缩类型。默认是无压缩。正确的选项值是none、gzip、snappy。压缩最好用于批量处理，批量处理消息越多，压缩性能越好
      compression-type: none

  redis:
    host: localhost
    port: 6379
    password: redis_df_123
